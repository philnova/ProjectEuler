"""
Problem 1:

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
"""

def prob_1_raw(maximum, multiplier):
	total = 0
	start = maximum / multiplier
	if multiplier * start == maximum:
		start -= 1
	return [multiplier * i for i in range(start+1)]

def prob_1_cleaned(maximum, mult1, mult2):
	answer = prob_1_raw(maximum, mult1)
	answer.extend(prob_1_raw(maximum, mult2))
	#print answer
	return sum(list(set(answer)))

print prob_1_cleaned(1000, 3, 5)

# ==================================================== #

"""
Problem 2:

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

def fibonacci_even_counter(maximum):
	starting_set = [1, 2]
	starting_sum = 2
	current_term = 2

	while current_term < maximum:
		current_term = sum(starting_set)
		#print current_term
		starting_set.append(current_term)
		starting_set.pop(0)
		if not current_term % 2:
			starting_sum += current_term

	return starting_sum

print fibonacci_even_counter(4000000)

# ==================================================== #

"""
Problem 3:

The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
"""

def largest_prime_factor(n):
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
    return n

print largest_prime_factor(600851475143)

# ==================================================== #

"""
Problem 4:

A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 x 99.

Find the largest palindrome made from the product of two 3-digit numbers.
"""

def check_palindrome(n):
	strn = str(n)
	start, end = 0, len(strn)-1
	while not start > end:
		if not strn[start] == strn[end]:
			return False
		else:
			start += 1
			end -= 1
	return True

def largest_n_digit(n_digits):
	n = "9" * n_digits
	return int(n)

def palindrome_product(n_digits):
	n0, n1 = largest_n_digit(n_digits), largest_n_digit(n_digits)
	flag = False
	while n0 > 0 and n1 > 0:
		if n0 % largest_n_digit(n_digits-1)+1:
			current = n0 * n1
			if check_palindrome(current):
				return current, n1, n0
			else:
				n0 -= 1
		else:
			n1 -= 1
			n0 = n1
	return None, n1, n0

print palindrome_product(3)[0]

# ==================================================== #

"""
Problem 5:

2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
"""

def smallest_multiple(maximum):
	answer = maximum
	while True:
		answer += maximum #answer must be a multiple of maximum, so we can increment by maximum
		for i in xrange(2,maximum+1):
			if answer % i: #there is remainder
				break
			elif i == maximum:
				return answer

#print smallest_multiple(20)

# ==================================================== #

"""
Problem 6:

The sum of the squares of the first ten natural numbers is,

12 + 22 + ... + 102 = 385
The square of the sum of the first ten natural numbers is,

(1 + 2 + ... + 10)2 = 552 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
"""


def sum_square_difference(maximum):
	square_of_sums = sum([i for i in xrange(maximum+1)])**2
	sum_of_squares = sum([i**2 for i in xrange(maximum+1)])
	return square_of_sums - sum_of_squares

print sum_square_difference(100)

# ==================================================== #

"""
Problem 7:

By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?
"""
import math
PRIMES_LIST = [2,3,5,6,11,13]

def test_prime(n):
	if n in (0,1,2):
		return True
	start = math.ceil(math.sqrt(n))
	#print start, "start"
	#print start, "start"
	while not start == n:
		#print start, "current iter"
		if not n % start:
			return False
		else:
			start+=1
	return True

#for i in xrange(20):
#	print i, test_prime(i)

def find_primes(target_prime = 10001):
	global PRIMES_LIST
	current_number = 13
	while len(PRIMES_LIST) < target_prime:
		current_number+=2
		if test_prime(current_number):
			PRIMES_LIST.append(current_number)
			print len(PRIMES_LIST), current_number
		else:
			pass
	return PRIMES_LIST[-1]

#print find_primes()
#print PRIMES_LIST

# ==================================================== #

"""
Problem 8:

The four adjacent digits in the 1000-digit number that have the greatest product are 9 x 9 x 8 x 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?"""

def find_greatest_adjacent_product(number_as_string, n_adjacent = 13):
	greatest_product = 0
	for start_idx in xrange(len(number_as_string)-n_adjacent):
		current_window = number_as_string[start_idx:start_idx+n_adjacent]
		if "0" in current_window:
			pass
		else:
			current_product = 1
			for item in current_window:
				current_product*=int(item)
			if current_product > greatest_product:
				greatest_product = current_product
	return greatest_product

NUMBER = ''.join("""73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450""".split())

print find_greatest_adjacent_product(NUMBER, 13)

# ==================================================== #

"""
Problem 9:

A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

a2 + b2 = c2
For example, 32 + 42 = 9 + 16 = 25 = 52.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.
"""

def find_special_triplet():
	a, b = 1,1
	while True:
		c = math.sqrt(a**2 + b**2)
		#print a, b, c, a+b+c
		if 999.99999 < a+b+c < 1000.00001:
			return a*b*c
		elif b > 1000:
			b = a+1
			a+=1
		elif a > 1000 and b > 1000:
			return
		else:
			b+=1

print find_special_triplet()

# ==================================================== #

"""
Problem 10:

The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

Find the sum of all the primes below two million.
"""
import time
def sum_of_all_primes(cutoff = 2000000):
	running_sum = 2
	for integer in xrange(3,cutoff):
		if test_prime(integer):
			running_sum+=integer
		integer += 2
	return running_sum
# start = time.time()
# print sum_of_all_primes()
# end = time.time()
# print "time taken by prime count: ", end - start

def sieve_of_eratosthenes(cutoff = 2000000):
	truth_table = [True for i in xrange(cutoff)]
	for idx in xrange(2, int(math.ceil(math.sqrt(cutoff)))):
		if truth_table[idx]:
			current_number = idx
			counter = 0
			while True:
				current_number = idx**2 + counter * idx
				if current_number >= cutoff:
					break
				else:
					counter += 1
					truth_table[current_number] = False

	primes = [idx for idx, i in enumerate(truth_table) if i]
	return sum(primes)-1 #1 is not considered prime

print sieve_of_eratosthenes()
